service: dnd_handbook
image: sas145work/dnd_handbook

servers:
  web:
    - dnd_handbook

proxy:
  ssl: true
  host: dndhandbook.ru

registry:
  username: sas145work
  # Always use an access token rather than real password when possible.
  password:
    - KAMAL_REGISTRY_PASSWORD

# Inject ENV variables into containers (secrets come from .kamal/secrets).
env:
  secret:
    - RAILS_MASTER_KEY
    - KAMAL_REGISTRY_PASSWORD
    - POSTGRES_PASSWORD
  clear:
    SOLID_QUEUE_IN_PUMA: true
    RAILS_LOG_TO_STDOUT: enabled
    RAILS_SERVE_STATIC_FILES: enabled
    POSTGRES_USER: dnd_handbook
    POSTGRES_DB: dnd_handbook_production
    DB_HOST: dnd_handbook-db
    DB_PORT: 5432
#    BOT_TOKEN: 7901258290:AAGofKmUY2hllwLDuIl0GiJNiwbmdPE3oYY # tmp
#    BOT_NAME: tmp_bot_remove_bot # tmp

# Aliases are triggered with "bin/kamal <alias>". You can overwrite arguments on invocation:
# "bin/kamal logs -r job" will tail logs from the first server in the job section.
aliases:
  console: app exec -i --reuse "bin/rails console"
  bash: app exec -i --reuse "bash"
  logs: app logs -f
  dbc: app exec -i --reuse "bin/rails dbconsole"
  dbb: accessory exec db -i --reuse "bash"

# Use a persistent storage volume for sqlite database files and local Active Storage files.
# Recommended to change this to a mounted volume path that is backed up off server.
#volumes:
#  - "dnd_handbook_storage:/rails/storage"


# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
asset_path: /rails/public/assets

# Configure the image builder.
builder:
  arch: amd64

# Use a different ssh user than root
ssh:
  user: sneaky

accessories:
  db:
    image: postgres:17
    host: dnd_handbook
    port: "127.0.0.1:5432:5432"
    env:
      clear:
        POSTGRES_USER: dnd_handbook
        POSTGRES_DB: dnd_handbook_production
      secret:
        - POSTGRES_PASSWORD
    files:
#       - config/mysql/production.cnf:/etc/mysql/my.cnf
      - db/production.sql:/docker-entrypoint-initdb.d/setup.sql
    directories:
      - data:/var/lib/postgresql/data
